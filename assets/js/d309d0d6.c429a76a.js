"use strict";(self.webpackChunkdoc_kj_96=self.webpackChunkdoc_kj_96||[]).push([[467],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,F=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(F,i(i({ref:t},s),{},{components:n})):r.createElement(F,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3059:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:1,draft:!0},c="Projects",p={unversionedId:"Template/Projects/index",id:"Template/Projects/index",title:"Projects",description:"Add Markdown or React files to src/pages to create a standalone page:",source:"@site/docs/Template/Projects/index.md",sourceDirName:"Template/Projects",slug:"/Template/Projects/",permalink:"/kj96/docs/Template/Projects/",editUrl:"https://github.com/kj96/kj96/docs/Template/Projects/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,draft:!0},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/kj96/docs/Template/"},next:{title:"Bitcoin Resources",permalink:"/kj96/docs/Template/Projects/resources"}},s={},d=[{value:"Generating a crypto identity - Elliptic Curve Cryptography (ECC)",id:"generating-a-crypto-identity---elliptic-curve-cryptography-ecc",level:2},{value:"Tokens as Layer 2",id:"tokens-as-layer-2",level:2}],u={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"projects"},"Projects"),(0,o.kt)("p",null,"Add ",(0,o.kt)("strong",{parentName:"p"},"Markdown or React")," files to ",(0,o.kt)("inlineCode",{parentName:"p"},"src/pages")," to create a ",(0,o.kt)("strong",{parentName:"p"},"standalone page"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"src/pages/index.js")," -> ",(0,o.kt)("inlineCode",{parentName:"li"},"localhost:3000/")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"src/pages/foo.md")," -> ",(0,o.kt)("inlineCode",{parentName:"li"},"localhost:3000/foo")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"src/pages/foo/bar.js")," -> ",(0,o.kt)("inlineCode",{parentName:"li"},"localhost:3000/foo/bar"))),(0,o.kt)("h2",{id:"generating-a-crypto-identity---elliptic-curve-cryptography-ecc"},"Generating a crypto identity - Elliptic Curve Cryptography (ECC)"),(0,o.kt)("p",null,"Bitcoin uses Elliptic Curve Cryptography instead of something more common like RSA to secure the transactions."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Elliptic curve")," is a fairly low dimensional mathematical object and takes only ",(0,o.kt)("inlineCode",{parentName:"p"},"3 integers")," to define::"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'from __future__ import annotations # PEP 563: Postponed Evaluation of Annotations\nfrom dataclasses import dataclass # https://docs.python.org/3/library/dataclasses.html\n\n@dataclass\nclass Curve:\n    """\n    Elliptic Curve over the field of integers modulo a prime.\n    Points on the curve satisfy y^2 = x^3 + a*x + b (mod p).\n    """\n    p: int # the prime modulus of the finite field\n    a: int\n    b: int\n\n# secp256k1 uses a = 0, b = 7, so we\'re dealing with the curve y^2 = x^3 + 7 (mod p)\nbitcoin_curve = Curve(\n    p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F,\n    a = 0x0000000000000000000000000000000000000000000000000000000000000000, # a = 0\n    b = 0x0000000000000000000000000000000000000000000000000000000000000007, # b = 7\n)\n\n')),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"Generator")," point, which is fixed \u201cstarting point\u201d and is publicly known and agreed upon constant::"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'@dataclass\nclass Point:\n    """ An integer point (x,y) on a Curve """\n    curve: Curve\n    x: int\n    y: int\n\nG = Point(\n    bitcoin_curve,\n    x = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798,\n    y = 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8,\n)\n\n# we can verify that the generator point is indeed on the curve, i.e. y^2 = x^3 + 7 (mod p)\nprint("Generator IS on the curve: ", (G.y**2 - G.x**3 - 7) % bitcoin_curve.p == 0)\n\n# some other totally random point will of course not be on the curve, _MOST_ likely\nimport random\nrandom.seed(1337)\nx = random.randrange(0, bitcoin_curve.p)\ny = random.randrange(0, bitcoin_curve.p)\nprint("Totally random point is not: ", (y**2 - x**3 - 7) % bitcoin_curve.p == 0)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Generator IS on the curve:  True\nTotally random point is not:  False\n")),(0,o.kt)("p",null,"Finally, ",(0,o.kt)("strong",{parentName:"p"},"Generator"),", the order of the generating point G is known, and is effectively the \u201csize of the set\u201d we are working with in terms of the (x,y) integer tuples on the cycle around the curve::"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'@dataclass\nclass Generator:\n    """\n    A generator over a curve: an initial point and the (pre-computed) order\n    """\n    G: Point     # a generator point on the curve\n    n: int       # the order of the generating point, so 0*G = n*G = INF\n\nbitcoin_gen = Generator(\n    G = G,\n    # the order of G is known and can be mathematically derived\n    n = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141,\n)\n')),(0,o.kt)("h2",{id:"tokens-as-layer-2"},"Tokens as Layer 2"),(0,o.kt)("p",null,"Create a file at ",(0,o.kt)("inlineCode",{parentName:"p"},"src/pages/my-markdown-page.md"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mdx",metastring:'title="src/pages/my-markdown-page.md"',title:'"src/pages/my-markdown-page.md"'},"# My Markdown page\n\nThis is a Markdown page\n")),(0,o.kt)("p",null,"A new page is now available at ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/my-markdown-page"),"."))}m.isMDXComponent=!0}}]);